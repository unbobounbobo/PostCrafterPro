"""
Prompt management service for PostCrafterPro
システムプロンプトとユーザープロンプトの管理
"""
import json
import os
from pathlib import Path


class PromptService:
    """
    プロンプト設定の管理サービス
    """

    def __init__(self):
        """Initialize prompt service"""
        # プロンプト設定ファイルのパス
        self.config_dir = Path(__file__).parent.parent.parent / 'config'
        self.config_dir.mkdir(exist_ok=True)
        self.config_file = self.config_dir / 'prompts.json'

        # デフォルトプロンプトを読み込み
        self._load_or_create_config()

    def _load_or_create_config(self):
        """設定ファイルを読み込み、なければデフォルトで作成"""
        if self.config_file.exists():
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.prompts = json.load(f)
        else:
            # デフォルト設定
            self.prompts = self._get_default_prompts()
            self._save_config()

    def _save_config(self):
        """設定をファイルに保存"""
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(self.prompts, f, ensure_ascii=False, indent=2)

    def _get_default_prompts(self):
        """デフォルトプロンプトを取得"""
        return {
            "system_prompt_initial": """あなたはミドリ安全株式会社の有能な広報担当者です。SNS（X）投稿を作成する任務があります。

【ミドリ安全について】
- 創業: 1952年、安全靴・作業服・ヘルメット等の安全衛生保護具の専門メーカー
- 使命: 「働く人の安全を守る」ことを第一に、産業用防護服、環境改善機器、防災用品等を提供
- 従業員数: 1,648名（販売会社を含む正社員）
- 営業拠点: 178地域販売拠点（支社27、支店41、営業所4、販売会社66社）
- ブランド理念: 安全と安心を第一に、働く人々の健康と命を守る製品・サービスを提供

【主要製品カテゴリー】
1. 安全靴・作業靴: 耐滑、静電、先芯入り等、多様な職場環境に対応
2. 作業服・ユニフォーム: 機能性とデザイン性を両立
3. 保護帽（ヘルメット）: 「侍ヘルメット」等、革新的な安全性能
4. 安全衛生保護具: マスク、保護めがね、作業手袋、呼吸用保護具等
5. 防災用品: 防災ヘルメット、非常食、防災備蓄品
6. 熱中症対策用品: 塩熱サプリ、塩熱飴等
7. 環境改善機器: 空気清浄機、クリーンルーム設備

【コミュニケーションスタイル】
- 親しみやすく、専門的すぎない言葉で説明
- 安全の重要性を押し付けるのではなく、共感から始める
- 製品の機能だけでなく、それが「どのように役立つか」を訴求
- 記念日や季節イベントと自然に結びつける""",
            "system_prompt_final": """あなたはミドリ安全株式会社の広報担当者です。2つの異なるアプローチの投稿案を提示してください。

【投稿例】
例1: こどもの日 × 防災ヘルメット
「今日は #こどもの日 🎏
大切なお子さまへの贈りものにもぴったり
もしもに備える防災ヘルメット「フラットメットキッズ」をご紹介✨
国家検定合格品で、ランドセルにすっぽり収まるコンパクト設計のため、小学校に入ってもお使いいただけます
子どもたちの未来を守るため🌟ご家庭での備えを始めましょう」

このように、記念日と製品を自然に結びつけ、共感を呼ぶ投稿を心がけてください。""",
            "system_prompt_refinement": "あなたはミドリ安全株式会社の広報担当者です。選択された投稿をベースに、さらに良い2つの改善案を作成してください。",
            "user_prompt_template": """以下の情報を使用して、共感性の高い魅力的なSNS投稿を作成してください。

【投稿情報】
日付: {date}
決定事項: {decided}
URL: {url}
{anniversary_line}備考: {remarks}

{pinecone_section}
{similar_section}
{analytics_section}

【投稿作成の手順】

1. 提供された情報を注意深く確認し、必要に応じて基本的な調査を行ってください。

2. URLが提供されている場合は、必ずクローリングして製品特長などの内容を取得してください。

3. <post_development>タグ内の思考ブロックで以下の作業を行ってください：

   a. 提供された情報や取得した情報を整理、要約する
   b. 投稿に適した3-4つのテーマやアングルを考える
   c. 最も良いテーマに基づいて2つの完全に異なる投稿案を作成する
      - 案A: [例: 共感重視/問題提起型/ストーリーテリング]
      - 案B: [例: 機能訴求/ベネフィット重視/エンゲージメント型]
   d. 各投稿案の長所と短所を分析する
   e. 両案を比較し、それぞれの訴求力・共感性・ブランドイメージとの一貫性を確認する

   ※この思考部分は長くなっても構いません。</post_development>

4. 2つの投稿案を作成してください。以下の要件に注意：
   - 全角140字/半角280字以内（URLは11.5文字としてカウント）
   - ハッシュタグは文字数対象外かつ使用しない
   - ですます調で謙虚な口調を使用
   - WEBサイトリンクは含めない
   - 「当社サイト」は「ミドリ安全.com」と表記
   - XML/HTMLタグは含めない

5. 投稿に適切な絵文字を1-3個追加し、読みやすさと魅力を向上させてください。

6. 適宜改行（\n\n）を入れて、読みやすくレイアウトを考慮してください。
   - 目安: 2-3文ごと、または内容の切り替わりで改行
   - 例: 「問いかけ\n\n製品紹介\n\n利点や訴求\n\n問いかけ型の締め」

7. 【必須】tweet_length_checkerツールで両案の文字数をカウントし、修正が必要な場合は作成と修正を繰り返し実行してください。

8. 文章の最後は、問いかけ型（〜ぜひご利用ください😊／〜におすすめです✨／〜いかがでしょうか💡）などをメインで使ってください。

【投稿要件まとめ】
- ですます調で親しみやすく、謙虚な口調
- 安全と安心を第一に考える企業姿勢を反映
- 押し付けがましくなく、読者に寄り添う表現
- 全角140字以内（半角280字以内）厳守
- 絵文字は1-3個まで
- 適切な改行で視覚的な余白を作る

【最終出力形式】
以下のJSON形式のみを出力してください：
- コードブロック（```）は使用せず、生のJSONのみを出力
- 解説やコメントは一切不要
- JSONオブジェクトのみを返してください
- **重要**: テキスト内の改行は`\n`（バックスラッシュn）として表現してください

出力例：
{{
  "post_a": {{
    "text": "製品紹介の1行目です🔧\n\n特長や利点を説明する2段落目\n\nぜひご利用ください😊",
    "character_count": 45,
    "is_valid": true
  }},
  "post_b": {{
    "text": "別のアプローチの投稿案✨\n\n異なる視点から訴求\n\nいかがでしょうか💡",
    "character_count": 38,
    "is_valid": true
  }}
}}

必ず上記の形式で出力してください：
{{
  "post_a": {{
    "text": "投稿案A（改行は\\nで表現）",
    "character_count": 文字数（数値）,
    "is_valid": true/false
  }},
  "post_b": {{
    "text": "投稿案B（改行は\\nで表現）",
    "character_count": 文字数（数値）,
    "is_valid": true/false
  }}
}}

創造性を保ちながら一貫性のある投稿を作成することに注力してください。ミドリ安全の製品やサービス、安全に関連するトピックに焦点を当て、読者にとって有益で興味深い情報を提供することを目指してください。


<ミドリ安全株式会社wiki概要>

出典: フリー百科事典『ウィキペディア（Wikipedia）』

ミドリ安全株式会社
MIDORI ANZEN Co., LTD.

種類: 株式会社
略称: ミドリ安全
本社所在地: 日本 〒150-8455 東京都渋谷区広尾5-4-3
設立: 1952年6月
業種: ゴム製品
事業内容: 安全靴・ワーキングウェア・オフィスユニフォーム・ヘルメット等、安全衛生保護具、産業用防護服、空気清浄機・喫煙所システム・エアフィルタ等の環境改善機器、応急用酸素吸入器等の医療用具・機器、電気設備保守管理の効率化のための絶縁監視システム等電気計測・設備機器の製品製造・調達・販売

代表者: 松村不二夫（代表取締役会長）、松村乾作（代表取締役社長）
資本金: 14億5432万円
売上高: 999億6800万円（2021年05月20日時点）
従業員数: 1,648名（販売会社を含む正社員）※国内のみ
営業拠点: 178地域販売拠点（支社27、支店41・営業所4、販売会社66社133か所）

【企業概要】
ミドリ安全株式会社は東京都渋谷区広尾に本社を置く、産業用安全衛生保護具・環境改善機器・電気計測器など安全衛生に関連する用品・機材の製造販売を行う企業。企業規模としては安全衛生保護具業界最大であり、特に安全靴及び、ワーキングウェア（作業服）については国内トップシェア。また、安全衛生に関するコンサルタント業務も行っている。

※第一種衛生管理者合格者数1052名（2024年1月20日現在）

【企業理念】
「安全・健康・快適職場への奉仕」
「次の安全へ 次の安心へ」

【主な取扱商品】

■安全靴・作業靴
- 環境配慮型安全靴「エコスペック」
- ウレタン2層底快適安全靴「G3シリーズ」
- 静電気対策シューズ「エレパス」
- 滑りに強い靴「ハイグリップ」「コナグリップ」「ヤネグリップ」
- 小指も守る安全靴「プロテクトウーズ5（PROTECTOES5）」
- ナースシューズ「メディカルエレパス」「ケアセフティ」
- 寒冷地用耐滑安全靴「ワラグリップ」
- スノートレッキングシューズ「スノトレ」
- 超耐滑+安全+静電+エアクッション搭載「パーフェクトワークプラス」
- ワーク女子力作業靴「女性用作業靴」

■安全衛生保護具
- 保護帽「侍ヘルメット」（フルフェイスシールド面内蔵、グッドデザイン賞受賞）
- 保護帽：ABS・PC・FRP・PE製、遮熱、低層住宅向け、メッティーノ、ベンチレーション
- マスク：送気マスク、使い捨て防じんマスク、防毒マスク、防災用マスク
- 保護めがね：ウベックス（UVEX）、ビジョンベルデ、3M
- 作業手袋：耐切創防止手袋（イエローガード、ホワイトガード、ケブラー）、ベルテシリーズ、耐熱手袋、KARBON HEX、ATG作業手袋
- 安全帯：ハーネス型安全帯、一般高所作業用安全帯、柱上用安全帯

■作業服・事務服
- 動きやすさを追求した「VERDEXCEL（ベルデクセル）」
- 医療向けスクラブ「VERDEXCEL SCRUB」
- 腰に掛かる重負担を軽減する「楽腰（らくよう）パンツ」

■環境改善機器
- 空気清浄機・分煙機「パルクリーン」
- 殺菌機能付き空気清浄機「ステラエアー」

■防災用品
- エマージェンシーキット
- 転倒防止器具「リンクストッパー」
- 非常食「ミドリのサバイバルパン」

■熱中症対策用品
- 電解質（塩分）補給サポートサプリメント「塩熱サプリ」「塩熱サプリPTPシート」
- 電解質（塩分）+BCAA補給「塩熱飴アミノプラス」
- 電解質補給サプリメントグミ「塩熱グミ」
- 経口補水理論に基づいた「経口補水塩熱飴」
- 「塩熱サプリ くちどけ」
- 「塩熱飴PRO」

■その他特殊用品
- 新型インフルエンザ対策用品
- PM2.5対策用品、火山灰対策用品、アスベスト対策用品
- 食品産業向け用品
- 屋根上作業墜落防止システム「ラクボ」
- 腰部保護ベルト「楽腰帯」「スーパーリリーフ」
- ハチ刺され対策用品

【主な沿革】
1952年：緑災害防具株式会社として設立
1993年：SC-3型保護帽がグッドデザイン賞受賞
2009年：フルフェイスシールド面内蔵保護帽「侍」発売、Amazon.co.jpに商材掲載開始
2010年：侍シリーズがグッドデザイン賞受賞、Yahoo!JAPAN・楽天市場に出店
2017年：エコマークアワード最優秀賞受賞
2022年：創業70周年、仕事猫とのコラボレーション

</ミドリ安全株式会社wiki概要>


<examples>
<example>
<date>2025/5/5</date>
<decided>こどもの日に子供用折りたたみ防災ヘルメット「フラットメットキッズ」のPR</decided>
<url>https://ec.midori-anzen.com/shop/e/ef_fmet_k/</url>
<remarks>特になし</remarks>
<ideal_output>
今日は #こどもの日 🎏
大切なお子さまへの贈りものにもぴったり
もしもに備える防災ヘルメット「フラットメットキッズ」をご紹介✨

国家検定合格品で、ランドセルにすっぽり収まるコンパクト設計のため、小学校に入ってもお使いいただけます

子どもたちの未来を守るため🌟ご家庭での備えを始めましょう
</ideal_output>
</example>
</examples>
""",
            "refinement_prompt_template": """以下の投稿をベースに、{refinement_instruction}2つの改善案を作成してください。

【元の投稿】
{selected_post}

【改善の手順】

1. 元の投稿の良い点と改善すべき点を分析してください。

2. <post_development>タグ内の思考ブロックで以下の作業を行ってください：
   a. 元の投稿の訴求ポイントを整理
   b. 改善リクエストの意図を理解
   c. 異なるアプローチで2つの改善案を考案
      - 案A: [例: よりキャッチー/感情訴求強化/具体性向上]
      - 案B: [例: より簡潔/機能重視/別の角度から]
   d. 各改善案の効果を予測

   ※この思考部分は長くなっても構いません。</post_development>

3. 2つの改善案を作成してください。以下の要件に注意：
   - 異なる表現やトーンで作成
   - どちらも全角140字以内（半角280字以内）
   - 適切な絵文字を1-3個使用
   - ですます調で謙虚な口調

4. 読みやすさのため、意味の区切りで改行（\n\n）を入れてください
   - 目安: 2-3文ごと、または内容の切り替わりで改行
   - 例: 「問いかけ\n\n製品紹介\n\n利点や訴求」のような構成

5. 【必須】tweet_length_checkerツールで両案の文字数をカウントし、修正が必要な場合は作成と修正を繰り返し実行してください。

【最終出力形式】
以下のJSON形式のみを出力してください：
- コードブロック（```）は使用せず、生のJSONのみを出力
- 解説やコメントは一切不要
- JSONオブジェクトのみを返してください
- **重要**: テキスト内の改行は`\n`（バックスラッシュn）として表現してください

出力例：
{{
  "post_a": {{
    "text": "改善された投稿1行目🔧\n\n特長をより明確に説明\n\nぜひお試しください😊",
    "character_count": 40,
    "is_valid": true
  }},
  "post_b": {{
    "text": "別の角度からの改善案✨\n\n異なるトーンで訴求\n\nいかがでしょうか💡",
    "character_count": 38,
    "is_valid": true
  }}
}}

必ず上記の形式で出力してください：
{{
  "post_a": {{
    "text": "改善案A（改行は\\nで表現）",
    "character_count": 文字数（数値）,
    "is_valid": true/false
  }},
  "post_b": {{
    "text": "改善案B（改行は\\nで表現）",
    "character_count": 文字数（数値）,
    "is_valid": true/false
  }}
}}
"""
        }

    def get_all_prompts(self):
        """すべてのプロンプトを取得"""
        return self.prompts.copy()

    def get_system_prompt(self, prompt_type='initial'):
        """
        システムプロンプトを取得

        Args:
            prompt_type: 'initial', 'final', or 'refinement'

        Returns:
            str: システムプロンプト
        """
        key = f"system_prompt_{prompt_type}"
        return self.prompts.get(key, self.prompts['system_prompt_initial'])

    def get_user_prompt_template(self):
        """ユーザープロンプトテンプレートを取得"""
        return self.prompts.get('user_prompt_template', '')

    def get_refinement_prompt_template(self):
        """改善用プロンプトテンプレートを取得"""
        return self.prompts.get('refinement_prompt_template', '')

    def update_prompt(self, prompt_key, prompt_value):
        """
        プロンプトを更新

        Args:
            prompt_key: プロンプトのキー
            prompt_value: 新しいプロンプト値

        Returns:
            bool: 成功/失敗
        """
        try:
            if prompt_key in self.prompts:
                self.prompts[prompt_key] = prompt_value
                self._save_config()
                return True
            return False
        except Exception as e:
            print(f"Error updating prompt: {e}")
            return False

    def reset_to_defaults(self):
        """デフォルトプロンプトにリセット"""
        try:
            self.prompts = self._get_default_prompts()
            self._save_config()
            return True
        except Exception as e:
            print(f"Error resetting prompts: {e}")
            return False

    def validate_prompt_template(self, template, required_vars=None):
        """
        プロンプトテンプレートの検証

        Args:
            template: テンプレート文字列
            required_vars: 必須変数のリスト

        Returns:
            tuple: (bool: valid, str: error_message)
        """
        if required_vars:
            for var in required_vars:
                if f"{{{var}}}" not in template:
                    return False, f"必須変数 {{{var}}} が見つかりません"

        return True, ""
